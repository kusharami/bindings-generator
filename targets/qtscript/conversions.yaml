definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "${qtscript_class_name}::${registration_name}"
  sfunction: "${qtscript_class_name}::${registration_name}"
conversions:
  native_types:
    "std::string": QByteArray
    "std::wstring": QString
    "std::u16string": QString
    "std::u32string": QString
    "wchar_t": QString
    "char16_t": QString
    "char32_t": QString
    "char*": QByteArray
    "wchar_t*": QString
    "char16_t*": QString
    "char32_t*": QString
    "std::function": QScriptValue
    "@QFlags<.*>": int
    "@QUrlTwoFlags<.*>": int
    "enum": int
    int8_t: qint8
    int16_t: qint16
    int32_t: qint32
    int64_t: qint64
    uint8_t: quint8
    uint16_t: quint16
    uint32_t: quint32
    uint64_t: quint64
    size_t: unsigned
    ssize_t: int
    qsizetype: int
  to_native:
    "std::string": "${in_value}.toStdString()"
    "std::wstring": "${in_value}.toStdWString()"
    "std::u16string": "${in_value}.toStdU16String()"
    "std::u32string": "${in_value}.toStdU32String()"
    "wchar_t": "${in_value}.toStdWString().c_str()[0]"
    "char16_t": "${in_value}.toStdU16String().c_str()[0]"
    "char32_t": "${in_value}.toStdU32String().c_str()[0]"
    "char*": "${in_value}${'.' if $arg.is_const else '->'}data()"
    "wchar_t*": "${in_value}${'.' if $arg.is_const else '->'}toStdWString().c_str()"
    "char16_t*": "${in_value}${'.' if $arg.is_const else '->'}toStdU16String().c_str()"
    "char32_t*": "${in_value}${'.' if $arg.is_const else '->'}toStdU32String().c_str()"
    intptr_t: "${in_value}"
    uintptr_t: "${in_value}"
    ushort: "${in_value}"
    uint: "${in_value}"
    int8_t: "${in_value}"
    uint8_t: "${in_value}"
    int16_t: "${in_value}"
    uint16_t: "${in_value}"
    int32_t: "${in_value}"
    uint32_t: "${in_value}"
    int64_t: "${in_value}"
    uint64_t: "${in_value}"
    size_t: "${in_value}"
    ssize_t: "${in_value}"
    qint8: "${in_value}"
    quint8: "${in_value}"
    qint16: "${in_value}"
    quint16: "${in_value}"
    qint32: "${in_value}"
    quint32: "${in_value}"
    qint64: "${in_value}"
    quint64: "${in_value}"
    qlonglong: "${in_value}"
    qulonglong: "${in_value}"
    qintptr: "${in_value}"
    quintptr: "${in_value}"
    qreal: "${in_value}"
    size_t: "${in_value}"
    ssize_t: "${in_value}"
    qsizetype: "${in_value}"
    cc_time_t: "${in_value}"
    enum: "${arg.namespaced_name + '(' + $in_value + ')'}"
    "@QFlags<.*>": "${arg.namespaced_name + '(' + $in_value + ')'}"
    "@QUrlTwoFlags<.*>": "${arg.namespaced_name + '(' + $in_value + ')'}"
  from_native:
    "std::string": "QByteArray::fromStdString(${in_value})"
    "std::wstring": "QString::fromStdWString(${in_value})"
    "std::u16string": "QString::fromStdU16String(${in_value})"
    "std::u32string": "QString::fromStdU32String(${in_value})"
    "wchar_t": "QString::fromStdWString({${in_value}, wchar_t(0)})"
    "char16_t": "QString::fromStdU16String({${in_value}, char16_t(0)})"
    "char32_t": "QString::fromStdU32String({${in_value}, char32_t(0)})"
    "char*": "QByteArray(${in_value})"
    "wchar_t*": "QString::fromStdWString(${in_value})"
    "char16_t*": "QString::fromStdU16String(${in_value})"
    "char32_t*": "QString::fromStdU32String(${in_value})"
    intptr_t: "${in_value}"
    uintptr_t: "${in_value}"
    ushort: "${in_value}"
    uint: "${in_value}"
    int8_t: "${in_value}"
    uint8_t: "${in_value}"
    int16_t: "${in_value}"
    uint16_t: "${in_value}"
    int32_t: "${in_value}"
    uint32_t: "${in_value}"
    int64_t: "${in_value}"
    uint64_t: "${in_value}"
    size_t: "${in_value}"
    ssize_t: "${in_value}"
    qint8: "${in_value}"
    quint8: "${in_value}"
    qint16: "${in_value}"
    quint16: "${in_value}"
    qint32: "${in_value}"
    quint32: "${in_value}"
    qint64: "${in_value}"
    quint64: "${in_value}"
    qlonglong: "${in_value}"
    qulonglong: "${in_value}"
    qintptr: "${in_value}"
    quintptr: "${in_value}"
    qreal: "${in_value}"
    cc_time_t: "${in_value}"
    enum: "int(${in_value})"
    size_t: "unsigned(${in_value})"
    ssize_t: "int(${in_value})"
    qsizetype: "int(${in_value})"
    "@QFlags<.*>": "int(${in_value})"
    "@QUrlTwoFlags<.*>": "int(${in_value})"
    "std::function": "QScriptValue::NullValue"
  ns_map:
    "cocos2d::extension::": "cc."
    "cocos2d::ui::": "ccui."
    "cocos2d::": "cc."
    "spine::": "sp."
    "cocostudio::": "ccs."
    "cocosbuilder::": "cc."
    "CocosDenshion::": "cc."